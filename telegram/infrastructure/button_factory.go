package client

import (
	"arch-telegram-service/models"
	"fmt"
	tgbotapi "github.com/Syfaro/telegram-bot-api"
)

type ButtonFactory struct {
	offset int
}

func NewButtonFactory(offset int) *ButtonFactory {
	return &ButtonFactory{offset: offset}
}

func (bf *ButtonFactory) CreateMainBtn() tgbotapi.ReplyKeyboardMarkup {
	mainBtn := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonLocation("üè† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"),
			tgbotapi.NewKeyboardButton("üîò –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞"),
		),
	)

	return mainBtn
}

// TODO –º–Ω–æ–≥–æ –ª–æ–≥–∏–∫–∏
func (bf *ButtonFactory) CreateRadiusInlineBtns() tgbotapi.InlineKeyboardMarkup {
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	inlineBtn := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("500–º", "/change_radius 500"),
		tgbotapi.NewInlineKeyboardButtonData("1–∫–º", "/change_radius 1000"),
		tgbotapi.NewInlineKeyboardButtonData("2–∫–º", "/change_radius 2000"),
		tgbotapi.NewInlineKeyboardButtonData("5–∫–º", "/change_radius 5000"),
		tgbotapi.NewInlineKeyboardButtonData("10–∫–º", "/change_radius 10000"),
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, inlineBtn)

	return keyboard
}

func (bf *ButtonFactory) CreatePaginationBuildingsInlineBtns(msg models.OutgoingMessage) tgbotapi.InlineKeyboardMarkup {
	if msg.Paginator == nil || msg.Location == nil {
		return tgbotapi.InlineKeyboardMarkup{}
	}
	keyboard := tgbotapi.InlineKeyboardMarkup{}
	inlineBtn := make([]tgbotapi.InlineKeyboardButton, 0)

	currentPageNum := msg.Paginator.CurrentPage
	maxPages := msg.Paginator.MaxPages
	radius := msg.Radius
	longitude := msg.Location.Longitude
	latitude := msg.Location.Latitude

	res := make([]tgbotapi.InlineKeyboardButton, 0)
	if currentPageNum < maxPages && currentPageNum > 1 {
		res = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				"–ù–∞–∑–∞–¥",
				// —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞—Ä–Ω–∏—Ü—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
				fmt.Sprintf(
					"/pagination %v %v %v %v %v %v %v",
					currentPageNum-1,
					maxPages,
					(currentPageNum-1)*bf.offset-bf.offset,
					(currentPageNum-1)*bf.offset,
					radius,
					longitude,
					latitude,
				),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"–î–∞–ª–µ–µ",
				// —Å–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ä–Ω–∏—Ü—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
				fmt.Sprintf(
					"/pagination %v %v %v %v %v %v %v",
					currentPageNum+1,
					maxPages,
					currentPageNum*bf.offset,
					currentPageNum*bf.offset+bf.offset,
					radius,
					longitude,
					latitude,
				),
			),
		}
	} else if currentPageNum <= 1 && maxPages <= 1 {
		res = []tgbotapi.InlineKeyboardButton{}
	} else if currentPageNum == maxPages {
		res = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				"–ù–∞–∑–∞–¥",
				fmt.Sprintf(
					"/pagination %v %v %v %v %v %v %v",
					currentPageNum-1,
					maxPages,
					(currentPageNum-1)*bf.offset-bf.offset,
					(currentPageNum-1)*bf.offset,
					radius,
					longitude,
					latitude,
				),
			),
		}
	} else if currentPageNum == 1 && maxPages > 1 {
		res = []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData(
				"–î–∞–ª–µ–µ",
				fmt.Sprintf(
					"/pagination %v %v %v %v %v %v %v",
					currentPageNum+1,
					maxPages,
					currentPageNum*bf.offset,
					currentPageNum*bf.offset+bf.offset,
					radius,
					longitude,
					latitude,
				),
			),
		}
	}

	inlineBtn = append(inlineBtn, res...)
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, inlineBtn)

	return keyboard
}
